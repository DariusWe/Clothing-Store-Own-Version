- Go with the course way and at the end do it again, but with RTK!!!!

- next steps:
  - read redux docs
  - stripe chapter is stupid (too much backend stuff you cannot understand yet)

- Navigation is re-rendering because of useLocation() hook. That leads to rerendering of all it's children.
- NavbarTop is re-rendering because of navigate().

- Redux docs say not every selector should be memoized. Course is doing so though.
- products slice needs no selector logic, as my database is different than in the course. Already have most basic form of data.

#################

- Think about file/folder structure! (maybe feature-based?)
- Redux Saga deprecated, said Redux maintainer: https://stackoverflow.com/questions/72360331/is-it-worth-using-redux-saga-in-long-term
- Actions should have minimum amount of information (right?). So sending quantity and totalQuantity via an action is not best practice.
- Redux should store the most basic form of data. Selectors then should handle the selecting logic. See Redux chapter of udemy course.
  When selectors include code to extract the information needed, this code is run everytime the selector is run. This can be bad for
  performance, but look at redux chapter (think he has a solution for this). Also useSelector in combination with middleware can lead to
  not wanted rerenderings. This can be solved with Memoization (caching).
  --> Right now my action creator is doing all the fetching and preparing of the data. But should be changed to above strategy.
- research file/folder structuring strategies (React Redux)!
- research render behaviour of my components. Some components are unnecessarily rerendering multiple times.
- replace createStore with configureStore (https://redux-toolkit.js.org/api/configureStore)

ROUTING:
I want some of my components to render based on the actual location of the user in the url. So, for example, render the
navbar different depending on wether the user is on urlPath A or B. Ways:
- Check the location in each component via useLocation()
  - Would have to combined with a useEffect Hook in each component to update on location changes.
- create a global store variable for the current location and let components subscribe to that
  - also in combination with useEffect
- Some other way with React Router
- Look at routing docs. How is this done on big applications?


- ShoppingCart Price ist confusing. Add the single item price to it.
- Implement global css fonts, color etc. management
- continue WebDev document on google docs 
- Deploying: Learn about whats happening in the background. Learn about this service, it's advantages and disadvantages.
- Build Register-Page and Form
- Commit
- Redux
- Commit

- Fetching products from Firestore: Better, more organized solution? Right now super complicated to understand whats happening there...
- Make Responsive
- Optimize etc
- SEO considerations (alt attributes, correct html tags, content indexable?, )
- Accessibility (see Zara)
- Indicate Impressum, Privacy and stuff

  
AT THE END:
- Redo Spinner Animation for practice
- Animations and Click-Feedback
- When Cart-Popup open, make dark overlay over rest of site (look c&a)
- Include better images
- More sense-making prices
- Build Mens Page
- Build Collection Category Page
- Build Filter
- Build Wishlist
- Build Product-Page
- Include basic Account Settings



- Make a sticky, changing (on scroll) header, that always shows the most important information.
- Fetching all shop data from the database once and then store it in a context variable? Or is it ineffective to fetch ALL data? Maybe
  just fetch the parts you need? But then you would have to make more queries. What is faster and better? Also: Is it possible to fetch
  just the titles of the categorie documents for the shop page? For the shop page you don't need all the single items.
  Solution for now: As not a lot amount of data, i will fetch it with a single query and store it in a react context variable.
- What happens when database changes? Live updates in the UI? And when should these live updates happen?
- global solution to manage content width of pages
- global solution to manage font family and size

- solved: orderBy in firebase.jsx is not working. Solution: orderBy only working in queries, not in getDocs itself.
