- Continue Filter Section:
  - Go through the whole filter functionality and understand it, clean up and improve rerender cycles

- implement logger middleware

- next steps:
  - read redux docs
  - stripe chapter is stupid (too much backend stuff you cannot understand yet)

RERENDERING PERFORMANCE ISSUES - ignore for now:
- Navigation is re-rendering because of useLocation() hook. That leads to rerendering of all it's children.
- NavbarTop is re-rendering because of navigate().
- Should useLocation not be used in top level component?
- Rerendering in React does not automatically mean rerendering in the dom, right?
- Maybe performance issue not that big?
- maybe use window.location.pathname. It's vanilla JS and not a hook.
- maybe wrap entire app below top level component in another container, which is a react.memo() function.

- Think about file/folder structure! (maybe feature-based?)
- Redux Saga deprecated, said Redux maintainer: https://stackoverflow.com/questions/72360331/is-it-worth-using-redux-saga-in-long-term
- research render behaviour of my components. Some components are unnecessarily rerendering multiple times.

- Implement global css fonts, color etc. management
- continue WebDev document on google docs 
- Build Register-Page and Form
- Commit
- Redux
- Commit

- Fetching products from Firestore: Better, more organized solution?
- Make Responsive
- Optimize etc
- SEO considerations (alt attributes, correct html tags, content indexable?, )
- Accessibility (see Zara)
- Indicate Impressum, Privacy and stuff
  
AT THE END:
- Redo Spinner Animation for practice
- Move category description from products-page into database
- Animations and Click-Feedback
- Include better images
- Build Mens Page
- Build Collection Category Page
- Build Wishlist
- Build Product-Page
- Include basic Account Settings

- Make a sticky, changing (on scroll) header, that always shows the most important information.
- Fetching all shop data from the database once and then store it in a context variable? Or is it ineffective to fetch ALL data? Maybe
  just fetch the parts you need? But then you would have to make more queries. What is faster and better? Also: Is it possible to fetch
  just the titles of the categorie documents for the shop page? For the shop page you don't need all the single items.
  Solution for now: As not a lot amount of data, i will fetch it with a single query and store it in a react context variable.
- What happens when database changes? Live updates in the UI? And when should these live updates happen?
- global solution to manage content width of pages
- global solution to manage font family and size

- solved: orderBy in firebase.jsx is not working. Solution: orderBy only working in queries, not in getDocs itself.
